} else {
best_method = "Markovitz"
best_weights = Markovitzweights
print(paste(c("Investor should choose Markovitz method with weights: ", round(Markovitzweights, digits = 3)), collapse=" "))
}
return(c(maxReturn, best_method, best_weights))
options(warn = oldw) # coming back to previous warning settings
}
###########################################################3
vec <- c("FB", "GOOG", "AMZN", "NFLX")
methods <- c("1/n", "minvar", "tangency","markovitz") #c("1/n", "minvar", "tangency", "markovitz")
PO <- portfolioStrategy2(vec, 100, 10000, methods)
??portfolio.spec
portfolioStrategy <- function(SymbolVector, NoOfDays=365, Budget, Methods = c("1/n", "minvar", "tangency", "markovitz")) {
#####Check user's input#####
if (length(SymbolVector) < 2)
stop("Please provide at least two tickers!")
if (length(Methods) < 2)
stop("Please provide at least two methods!")
if (Budget < 100)
stop("Your budget should be at least 100$!")
all_methods <- c("1/n", "minvar", "tangency", "markovitz")
j <- 1
for (i in Methods){
if (i %in% all_methods){
j <- j*1
}
else {
j <- j*0
}
}
if (j == 0)
stop("Provided methods are not valid! You should provide at least two of: 1/n, minvar, tangency, markovitz")
oldw <- getOption("warn") #Get current warning options
options(warn = -1) # Turn off warnings
#####Installing packages#####
if(!'quantmod' %in% installed.packages()[,1]) install.packages('quantmod',repos = "http://cran.us.r-project.org")
require(quantmod)
if(!'data.table' %in% installed.packages()[,1]) install.packages('data.table',repos = "http://cran.us.r-project.org")
require(data.table)
if(!'timeseries' %in% installed.packages()[,1]) install.packages('timeseries',repos = "http://cran.us.r-project.org")
require(timeseries)
if(!'fPortfolio' %in% installed.packages()[,1]) install.packages('fPortfolio',repos = "http://cran.us.r-project.org")
require(fPortfolio)
if(!'ggplot2' %in% installed.packages()[,1]) install.packages('ggplot2',repos = "http://cran.us.r-project.org")
require(ggplot2)
if(!'PerformanceAnalytics' %in% installed.packages()[,1]) install.packages('PerformanceAnalytics',repos = "http://cran.us.r-project.org")
require(PerformanceAnalytics)
if(!'PortfolioAnalytics' %in% installed.packages()[,1]) install.packages('PortfolioAnalytics',repos = "http://cran.us.r-project.org")
require(PortfolioAnalytics)
#####Creating variables #####
from_date <- as.Date(Sys.Date())-NoOfDays
print(paste0("Period of analysis: ", as.Date(from_date), " : ", as.Date(Sys.Date())))
print(paste0("Suggested period of investement: ", as.Date(Sys.Date()), " : ", as.Date(Sys.Date()+NoOfDays)))
print(paste(c("Stock chosen by an investor: ", SymbolVector), collapse=" "))
VectorLength <- length(SymbolVector)
allSymbols <- list()
allSymbols2 <- list()
prices <- list()
stockQuantity <- list()
meanReturns <- list()
returns <- list()
returns2 <- list()
portfolioPrices <- NULL
print("Daily return for each company in period of analysis: ")
#####Loop over all tickers to get values, draw a barchart and clean dataset#####
for (i in 1:VectorLength) {
allSymbols[[i]] <- getSymbols(SymbolVector[i],auto.assign = FALSE, return.class="xts", from = from_date)
prices <- allSymbols[[i]][4]
portfolioPrices <- cbind(portfolioPrices, getSymbols(SymbolVector[i], from=from_date, auto.assign=FALSE)[,4])
barChart(allSymbols[[i]], name = SymbolVector[i])
stockQuantity[i] <- Budget/(allSymbols[[i]][length(allSymbols[[i]])/6][[4]])
allSymbols[[i]] <- allSymbols[[i]][apply(allSymbols[[i]],1,function(x) all(!is.na(x))),]
allSymbols2[[i]] <- (allSymbols[[i]][,4])
returns[[i]] <- na.omit(ROC(allSymbols[[i]], type="discrete"))
returns[[i]] <- as.timeSeries(returns[[i]])
returns2[[i]] <- CalculateReturns(allSymbols[[i]][,4])
meanReturns[[i]] <- (allSymbols2[[i]][[length(allSymbols2[[i]])]]-allSymbols2[[i]][[1]])/allSymbols2[[i]][[1]]
}
portfolioReturns <- na.omit(ROC(portfolioPrices, type="discrete"))
portfolioReturns <- as.timeSeries(portfolioReturns)
colnames(portfolioReturns) <- SymbolVector
SummaryReturn_1 <- 0
SummaryReturn_2 <- 0
SummaryReturn_3 <- 0
SummaryReturn_4 <- 0
meanReturns<-unlist(meanReturns, use.names=FALSE)
assets <- colnames(portfolioReturns)
#####Portfolio Optimization methods - weights plot, estimating return and calculating Sharpe ratio#####
### 1st Method: 1/n ###
if("1/n" %in% Methods){
print("1/n")
weights <- rep(1/VectorLength, VectorLength)
noOfStock <- rep(Budget/VectorLength, VectorLength)
SummaryReturn_1 <- Budget + (Budget*sum(weights*meanReturns))
print(paste(c("Using 1/n method portfolio should have weights: ", round(weights, digits = 3)), collapse=" "))
print(paste0("After period of investment, investor would have: ", round(SummaryReturn_1, digits=2), "$"))
df <- data.frame(weights)
print(ggplot(data=df, aes(x=assets, y=weights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",weights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("1/N Portfolio Optimal Weights")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)"))
Sharpe1 <- NULL
Sharpe1_2 <- NULL
for (i in 1:VectorLength) {
Sharpe1 <- cbind(Sharpe1, as.xts(as.vector(unlist(returns2[[i]]))*weights[[i]], order.by = index(portfolioPrices)))
}
for (i in 2:VectorLength) {
Sharpe1[,1] <- Sharpe1[,1] + as.numeric(Sharpe1[,i])
}
Sharpe_ratio_1 <- SharpeRatio(Sharpe1[,1])
print("The Sharpe ratio for 1/n method is: ")
print(Sharpe_ratio_1)
}
### 2nd Method: minimum-variance ###
if("minvar" %in% Methods){
mvp <- minvariancePortfolio(portfolioReturns, spec=portfolioSpec(), constraints="LongOnly")
print("MVP")
mvpweights <- getWeights(mvp)
SummaryReturn_2 <- Budget + (Budget*sum(mvpweights*meanReturns))
print(paste(c("Using minimum-variance method portfolio should have weights: ", round(mvpweights, digits = 3)), collapse=" "))
print(paste0("After period of investment, investor would have: ", round(SummaryReturn_2, digits=2), "$"))
#ggplot MVP Weights
df <- data.frame(mvpweights)
print(ggplot(data=df, aes(x=assets, y=mvpweights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",mvpweights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Minimum Variance Portfolio Optimal Weights")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
)
Sharpe2 <- NULL
Sharpe2_2 <- NULL
for (i in 1:VectorLength) {
Sharpe2 <- cbind(Sharpe2, as.xts(as.vector(unlist(returns2[[i]]))*mvpweights[[i]], order.by = index(portfolioPrices)))
}
for (i in 2:VectorLength) {
Sharpe2[,1] <- Sharpe2[,1] + as.numeric(Sharpe2[,i])
}
Sharpe_ratio_2 <- SharpeRatio(Sharpe2[,1])
print("The Sharpe ratio for minimum variance method is: ")
print(Sharpe_ratio_2)
}
### 3rd Method: tangency ###
if("tangency" %in% Methods){
tangency <- tangencyPortfolio(portfolioReturns, spec=portfolioSpec(), constraints="LongOnly")
print("Tangency")
tangpweights <- getWeights(tangency)
SummaryReturn_3 <- Budget + (Budget*sum(tangpweights*meanReturns))
print(paste(c("Using tangency method portfolio should have weights: ", round(tangpweights, digits = 3)), collapse=" "))
print(paste0("After period of investment, investor would have: ", round(SummaryReturn_3, digits=2), "$"))
df <- data.frame(tangpweights)
print(ggplot(data=df, aes(x=assets, y=tangpweights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",tangpweights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Tangency Portfolio Optimal Weights")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
)
Sharpe3 <- NULL
Sharpe3_2 <- NULL
for (i in 1:VectorLength) {
Sharpe3 <- cbind(Sharpe3, as.xts(as.vector(unlist(returns2[[i]]))*tangpweights[[i]], order.by = index(portfolioPrices)))
}
for (i in 2:VectorLength) {
Sharpe3[,1] <- Sharpe3[,1] + as.numeric(Sharpe3[,i])
}
Sharpe_ratio_3 <- SharpeRatio(Sharpe3[,1])
print("The Sharpe ratio for tangency method is: ")
print(Sharpe_ratio_3)
}
### 4th Method: Markovitz ###
if("markovitz" %in% Methods){
portfolio <- portfolio.spec(assets = SymbolVector)
portfolio <- add.constraint(portfolio, type = "box", min = 0.00, max = 0.9)
portfoliosRand <- random_portfolios(portfolio, permutations = 10000, rp_method = "sample")
portfolioMark <- add.objective(portfolio, type = "risk", name = "var")
optimMark <- optimize.portfolio(portfolioReturns, portfolioMark, optimize_method = "random", rp = portfoliosRand)
Markovitzweights <- optimMark$weights
SummaryReturn_4 <- Budget + (Budget * sum(Markovitzweights*meanReturns))
print("Markovitz")
print(paste(c("Using tangency method portfolio should have weights: ", round(Markovitzweights, digits = 3)), collapse = " "))
print(paste0("After period of investment, investor would have: ", round(SummaryReturn_4, digits = 2), "$"))
df <- data.frame(Markovitzweights)
print(ggplot(data=df, aes(x=assets, y=Markovitzweights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",Markovitzweights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Markovitz Portfolio Optimal Weights")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
)
Sharpe4 <- NULL
Sharpe4_2 <- NULL
for (i in 1:VectorLength) {
Sharpe4 <- cbind(Sharpe4, as.xts(as.vector(unlist(returns2[[i]]))*Markovitzweights[[i]], order.by = index(portfolioPrices)))
}
for (i in 2:VectorLength) {
Sharpe4[,1] <- Sharpe4[,1] + as.numeric(Sharpe4[,i])
}
Sharpe_ratio_4 <- SharpeRatio(Sharpe4[,1])
print("The Sharpe ratio for Markovitz method is: ")
print(Sharpe_ratio_4)
}
#####Computing max return#####
maxReturn <- max(SummaryReturn_1, SummaryReturn_2, SummaryReturn_3, SummaryReturn_4)
print(paste0('Maximum return is: ', maxReturn))
if (maxReturn == SummaryReturn_1){
best_method = "1/n"
best_weights = weights
print(paste(c("Investor should choose 1/n method with weights: ", round(weights, digits = 3)), collapse=" "))
} else if (maxReturn == SummaryReturn_2){
best_method = "minimum-variance"
best_weights = mvpweights
print(paste(c("Investor should choose minimum-variance method with weights: ", round(mvpweights, digits = 3)), collapse=" "))
} else if (maxReturn == SummaryReturn_3){
best_method = "tangency"
best_weights = tangpweights
print(paste(c("Investor should choose tangency method with weights: ", round(tangpweights, digits = 3)), collapse=" "))
} else {
best_method = "Markovitz"
best_weights = Markovitzweights
print(paste(c("Investor should choose Markovitz method with weights: ", round(Markovitzweights, digits = 3)), collapse=" "))
}
return(c(maxReturn, best_method, best_weights))
options(warn = oldw) # coming back to previous warning settings
}
vec <- c("FB", "GOOG", "AMZN", "NFLX")
methods <- c("1/n", "minvar", "tangency","markovitz") #c("1/n", "minvar", "tangency", "markovitz")
PO <- portfolioStrategy(vec, 100, 10000, methods)
portfolioStrategy2 <- function(SymbolVector, NoOfDays=365, Budget, Methods = c("1/n", "minvar", "tangency", "markovitz")) {
#####Check user's input#####
if (length(SymbolVector) < 2)
stop("Please provide at least two tickers!")
if (length(Methods) < 2)
stop("Please provide at least two methods!")
if (Budget < 100)
stop("Your budget should be at least 100$!")
all_methods <- c("1/n", "minvar", "tangency", "markovitz")
j <- 1
for (i in methods){
if (!(i %in% all_methods)){
stop("Provided methods are not valid! You should provide at least two of: 1/n, minvar, tangency, markovitz")
}
}
oldw <- getOption("warn") #Get current warning options
options(warn = -1) # Turn off warnings
#####Installing packages#####
if(!'quantmod' %in% installed.packages()[,1]) install.packages('quantmod',repos = "http://cran.us.r-project.org")
require(quantmod)
if(!'data.table' %in% installed.packages()[,1]) install.packages('data.table',repos = "http://cran.us.r-project.org")
require(data.table)
if(!'timeseries' %in% installed.packages()[,1]) install.packages('timeseries',repos = "http://cran.us.r-project.org")
require(timeseries)
if(!'fPortfolio' %in% installed.packages()[,1]) install.packages('fPortfolio',repos = "http://cran.us.r-project.org")
require(fPortfolio)
if(!'ggplot2' %in% installed.packages()[,1]) install.packages('ggplot2',repos = "http://cran.us.r-project.org")
require(ggplot2)
if(!'PerformanceAnalytics' %in% installed.packages()[,1]) install.packages('PerformanceAnalytics',repos = "http://cran.us.r-project.org")
require(PerformanceAnalytics)
if(!'tidyquant' %in% installed.packages()[,1]) install.packages('tidyquant',repos = "http://cran.us.r-project.org")
require(tidyquant)
if(!'RColorBrewer' %in% installed.packages()[,1]) install.packages('RColorBrewer',repos = "http://cran.us.r-project.org")
require(RColorBrewer)
if(!'dygraphs' %in% installed.packages()[,1]) install.packages('dygraphs',repos = "http://cran.us.r-project.org")
require(dygraphs)
if(!'PortfolioAnalytics' %in% installed.packages()[,1]) install.packages('PortfolioAnalytics',repos = "http://cran.us.r-project.org")
require(PortfolioAnalytics)
#####Creating variables #####
from_date <- as.Date(Sys.Date())-NoOfDays
print(paste0("Period of analysis: ", as.Date(from_date, "%m/%d/%Y"), " : ", as.Date(Sys.Date(),"%m/%d/%Y")))
print(paste0("Suggested period of investement: ", as.Date(Sys.Date(),"%m/%d/%Y"), " : ", as.Date((Sys.Date()+NoOfDays),"%m/%d/%Y")))
print(paste(c("Stock chosen by an investor: ", SymbolVector), collapse=" "))
VectorLength <- length(SymbolVector)
allSymbols <- list()
allSymbols2 <- list()
prices <- list()
stockQuantity <- list()
meanReturns <- list()
returns <- list()
returns2 <- list()
portfolioPrices <- NULL
print("Daily return for each company in period of analysis: ")
#####Loop over all tickers to get values, draw a barchart and clean dataset#####
for (i in 1:VectorLength) {
print(SymbolVector[i])
allSymbols[[i]] <- tq_get(SymbolVector[i], get = "stock.prices",return.class="xts", from = from_date)
allSymbols_df <- as.data.frame(allSymbols[[i]])
allSymbols[[i]] <- as.xts(allSymbols_df[,-1], order.by=allSymbols_df[,1])
portfolioPrices <- cbind(portfolioPrices, allSymbols[[i]][,4])
print(
ggplot(data = allSymbols_df, aes(x = date, y = close)) +
geom_line() +
labs(title = paste("Stock for: ", SymbolVector[i]), y = "Closing Price", x = "Time") +
theme_tq()
)
stockQuantity[i] <- Budget/(allSymbols[[i]][length(allSymbols[[i]])/6][[4]])
allSymbols[[i]] <- allSymbols[[i]][apply(allSymbols[[i]],1,function(x) all(!is.na(x))),]
allSymbols2[[i]] <- (allSymbols[[i]][,4])
returns[[i]] <- na.omit(ROC(allSymbols[[i]], type="discrete"))
returns[[i]] <- as.timeSeries(returns[[i]])
returns2[[i]] <- CalculateReturns(allSymbols[[i]][,4])
meanReturns[[i]] <- (allSymbols2[[i]][[length(allSymbols2[[i]])]]-allSymbols2[[i]][[1]])/allSymbols2[[i]][[1]]
}
portfolioReturns <- na.omit(ROC(portfolioPrices, type="discrete"))
portfolioReturns <- as.timeSeries(portfolioReturns)
colnames(portfolioReturns) <- SymbolVector
SummaryReturn_1 <- 0
SummaryReturn_2 <- 0
SummaryReturn_3 <- 0
SummaryReturn_4 <- 0
meanReturns<-unlist(meanReturns, use.names=FALSE)
assets <- colnames(portfolioReturns)
#####Portfolio Optimization methods#####
### 1st Method: 1/n ###
if("1/n" %in% Methods){
print("1/n")
weights <- rep(1/VectorLength, VectorLength)
noOfStock <- rep(Budget/VectorLength, VectorLength)
SummaryReturn_1 <- Budget + (Budget*sum(weights*meanReturns))
print(paste(c("Using 1/n method portfolio should have weights: ", round(weights, digits = 3)), collapse=" "))
print(paste0("After period of investment, investor would have: ", round(SummaryReturn_1, digits=2), "$"))
df <- data.frame(weights)
print(barplot(as.matrix(df), beside = T , legend.text = T, col = brewer.pal(n = 10, name = "Set3"),
ylim = c(0,1), main = "Equal Weigths Portfolio", ylab = "Weights in Portfolio", xlab = "Assets"))
portfolioM <- Return.portfolio(portfolioReturns, weights = weights)
portfolioE <- Return.excess(portfolioM)
sharpieRatio_1 <- round(mean(portfolioE) / StdDev(portfolioE), 3)
print("The Sharpe ratio for 1/n method is: ")
print(sharpieRatio_1[,1])
print(dygraph(portfolioM, main = "Portfolio Returns for 1/n method") %>%
dyAxis("y", label = "%"))
}
### 2nd Method: minimum-variance ###
if("minvar" %in% Methods){
mvp <- minvariancePortfolio(portfolioReturns, spec=portfolioSpec(), constraints="LongOnly")
print("MVP")
mvpweights <- getWeights(mvp)
SummaryReturn_2 <- Budget + (Budget*sum(mvpweights*meanReturns))
print(paste(c("Using minimum-variance method portfolio should have weights: ", round(mvpweights, digits = 3)), collapse=" "))
print(paste0("After period of investment, investor would have: ", round(SummaryReturn_2, digits=2), "$"))
df <- data.frame(mvpweights)
print(barplot(as.matrix(df), beside = T, legend.text = T, col = brewer.pal(n = 10, name = "Set3"),
ylim = c(0,1), main = "Minimum Variance Portfolio", ylab = "Weights in Portfolio", xlab = "Assets"))
portfolioM <- Return.portfolio(portfolioReturns, weights = mvpweights)
portfolioE <- Return.excess(portfolioM)
sharpieRatio_2 <- round(mean(portfolioE) / StdDev(portfolioE), 3)
print("The Sharpe ratio for minimum variance method is: ")
print(sharpieRatio_2[,1])
print(dygraph(portfolioM, main = "Portfolio Returns for minimum variance method") %>%
dyAxis("y", label = "%"))
}
### 3rd Method: tangency ###
if("tangency" %in% Methods){
tangency <- tangencyPortfolio(portfolioReturns, spec=portfolioSpec(), constraints="LongOnly")
print("Tangency")
tangpweights <- getWeights(tangency)
SummaryReturn_3 <- Budget + (Budget*sum(tangpweights*meanReturns))
print(paste(c("Using tangency method portfolio should have weights: ", round(tangpweights, digits = 3)), collapse=" "))
print(paste0("After period of investment, investor would have: ", round(SummaryReturn_3, digits=2), "$"))
df <- data.frame(tangpweights)
barplot(as.matrix(df), beside = T, legend.text = T, col = brewer.pal(n = 10, name = "Set3"),
ylim = c(0,1), main = "Tangency Portfolio", ylab = "Weights in Portfolio", xlab = "Assets")
portfolioM <- Return.portfolio(portfolioReturns, weights = tangpweights)
portfolioE <- Return.excess(portfolioM)
sharpieRatio_3 <- round(mean(portfolioE) / StdDev(portfolioE), 3)
print("The Sharpe ratio for tangency method is: ")
print(sharpieRatio_3[,1])
print(dygraph(portfolioM, main = "Portfolio Returns for tangency method") %>%
dyAxis("y", label = "%"))
}
### 4th Method: Markovitz ###
if("markovitz" %in% Methods){
portfolio <- portfolio.spec(assets = SymbolVector)
portfolio <- add.constraint(portfolio, type = "box", min = 0.00, max = 0.9)
portfoliosRand <- random_portfolios(portfolio, permutations = 10000, rp_method = "sample")
portfolioMark <- add.objective(portfolio, type = "risk", name = "var")
optimMark <- optimize.portfolio(portfolioReturns, portfolioMark, optimize_method = "random", rp = portfoliosRand)
Markovitzweights <- optimMark$weights
SummaryReturn_4 <- Budget + (Budget * sum(Markovitzweights*meanReturns))
print("Markovitz")
print(paste(c("Using tangency method portfolio should have weights: ", round(Markovitzweights, digits = 3)), collapse = " "))
print(paste0("After period of investment, investor would have: ", round(SummaryReturn_4, digits = 2), "$"))
df <- data.frame(Markovitzweights)
print(barplot(as.matrix(df), beside = T, legend.text = T, col = brewer.pal(n = 10, name = "Set3"),
ylim = c(0,1), main = "Mean-Variance Portfolio", ylab = "Weights in Portfolio", xlab = "Assets"))
portfolioM <- Return.portfolio(portfolioReturns, weights = Markovitzweights)
portfolioE <- Return.excess(portfolioM)
sharpieRatio_4 <- round(mean(portfolioE) / StdDev(portfolioE), 3)
print("The Sharpe ratio for Markovitz method is: ")
print(sharpieRatio_4[,1])
print(dygraph(portfolioM, main = "Portfolio Returns for Markovitz method") %>%
dyAxis("y", label = "%"))
}
maxReturn <- max(SummaryReturn_1, SummaryReturn_2, SummaryReturn_3, SummaryReturn_4)
print(paste0('Maximum return is: ', maxReturn))
if (maxReturn == SummaryReturn_1){
best_method = "1/n"
best_weights = weights
print(paste(c("Investor should choose 1/n method with weights: ", round(weights, digits = 3)), collapse=" "))
} else if (maxReturn == SummaryReturn_2){
best_method = "minimum-variance"
best_weights = mvpweights
print(paste(c("Investor should choose minimum-variance method with weights: ", round(mvpweights, digits = 3)), collapse=" "))
} else if (maxReturn == SummaryReturn_3){
best_method = "tangency"
best_weights = tangpweights
print(paste(c("Investor should choose tangency method with weights: ", round(tangpweights, digits = 3)), collapse=" "))
} else {
best_method = "Markovitz"
best_weights = Markovitzweights
print(paste(c("Investor should choose Markovitz method with weights: ", round(Markovitzweights, digits = 3)), collapse=" "))
}
return(c(maxReturn, best_method, best_weights))
options(warn = oldw) # coming back to previous warning settings
}
###########################################################3
vec <- c("FB", "GOOG", "AMZN", "NFLX")
methods <- c("1/n", "minvar", "tangency","markovitz") #c("1/n", "minvar", "tangency", "markovitz")
PO <- portfolioStrategy2(vec, 100, 10000, methods)
shiny::runApp('C:/Users/jakub/Desktop/WNE_Data_Science/RVisualisations/project')
setwd("C:\\Users\\jakub\\Desktop\\WNE_Data_Science\\RVisualisations\\project")
data<-read_csv("my_data.csv")
??read_csv
data<-read.csv("my_data.csv")
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='jakub-a',
token='81C9335870133E00F3CE7F5A8B594FF6',
secret='+KcXalQdZ97ir1fkVHumM9V4BmcX7wWG9cN7CQBk')
deployApp()
runApp()
deployApp()
test <- data %>%
filter(year >= "2000") %>%
filter(year <= "2014") %>%
filter(country %in% c("germany","poland", "estonia"))
test$year <- as.Date(test$year)
test$statystyka <- test$hdi
wykres <- ggplot(data = test, aes(x = gdp,
y = statystyka))
wykres <- wykres +
geom_point(aes(frame = year)) +
geom_text(label=test$country) +
labs(x="Gross Domestic Product", y="HDI")
ggplotly(wykres)
wykres <- wykres +
geom_point(aes(frame = year)) +
labs(x="Gross Domestic Product", y="HDI")
ggplotly(wykres)
wykres <- ggplot(data = test, aes(x = gdp, y = statystyka))
wykres <- wykres +
geom_point(aes(frame = year)) +
labs(x="Gross Domestic Product", y="HDI")
ggplotly(wykres)
View(test)
test <- data %>%
filter(year >= "2000") %>%
filter(year <= "2014") %>%
filter(country %in% c("germany","poland", "estonia"))
test$statystyka <- test$hdi
wykres <- ggplot(data = test, aes(x = gdp, y = statystyka))
wykres <- wykres +
geom_point(aes(frame = year)) +
labs(x="Gross Domestic Product", y="HDI")
ggplotly(wykres)
test$statystyka <- test$hdi
wykres <- ggplot(data = test, aes(x = gdp, y = statystyka))
wykres <- wykres +
geom_point(aes(frame = year)) +
geom_text(label=test$country) +
labs(x="Gross Domestic Product", y="HDI")
ggplotly(wykres)
test <- data %>%
filter(year >= "2000") %>%
filter(year <= "2014") %>%
filter(country %in% c("germany","poland", "estonia"))
test$statystyka <- test$hdi
wykres <- ggplot(data = test, aes(x = gdp, y = statystyka))
wykres <- wykres +
geom_point(aes(frame = year)) +
geom_text(label=test$country) +
labs(x="Gross Domestic Product", y="HDI")
ggplotly(wykres)
wykres <- wykres +
geom_point(aes(frame = year)) +
#geom_text(label=test$country) +
labs(x="Gross Domestic Product", y="HDI")
ggplotly(wykres)
wykres <- ggplot(data = test, aes(x = gdp, y = statystyka))
wykres <- wykres +
geom_point(aes(frame = year)) +
#geom_text(label=test$country) +
labs(x="Gross Domestic Product", y="HDI")
ggplotly(wykres)
runApp()
runApp()
View(data)
runApp()
library(animation)
wykres <- ggplot(data = test, aes(x = gdp, y = statystyka))
wykres <- wtkres + geom_point()
wykres <- wykres + transition_time(year)
wykres <- wykres + geom_point()
wykres <- wykres + transition_time(year)
wykres
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
